nate@hatch:~/Projects/analyst$ python
Python 2.7.12 (default, Dec  4 2017, 14:50:18) 
[GCC 5.4.0 20160609] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import analyst
>>> a = analyst.Analyst.load("/home/nate/Projects/an_scholar4000_real.dill")




!!!!!!!DON"T PRINT THINGS WE DIDN"T ASK FOR!!

write analogical analyses to compare:
glove vectors
FastText
word2vec
conceptnet numberbatch


There aren't regions in the space, per se. If things are often around 90 degrees
apart, then they are dispersed well, as like 6 points across the surface of a ball.


use ward dissimilarity somehow?


look into cluster extremities! (strange attractors)


(categories:)
spatial
nodes
clusters
user_cluster_algorithm1
user_cluster_algorithm2
#General Stats on analogy datasets:
#    set1
#    set2
#    set3
Stats on Analogy Set1:
    dispersion
    medoid
    etc
    similarity to set2
    similarity to set3
Stats on Analogy set2:
    ...
Stats on Analogy set3:
    ...
Analogy Algorithm 1:
    set1_score
    set2_score
    set3_score
Reclustering stats based on analogy test sets:
    (new general space info based on clusters)



average distance to nearest; nearest n
average distance to furthest; furthest n
average distance

find words where nearest are each other (these are nodes),
    then recursively find all words whose nearest are one of these, and so on.
    This should find peaks, or local concentrations; turn these into clusters.
    note: may end up with nearly num_words/2 clusters
    print percent of words that are part of a node
find average distance between words in "clusters".
    Some nodes will be closer than this, and to more than one cluster.
    But if we add all, may end up with one giant cluster.
    May label those further than this as outliers?
    Use avg dist between words in node-pairs as cutoff for outliers instead of avg dist of that cluster?
    Make new entity called "core" of all within that distance; primary dispersion measurement on this? Or would this simply be like the same as avg node width?
make function to print primary components of cluster; nodes/those closest.

make function to take in word/vec list and make a cluster based on it,
    then find all other words likely to belong to this cluster.
    This is useful since certain types of clusters will frequently overlap and words will belong to multiple classes.
    Then can measure purity of cluster based on user feed-back of what words didn't belong.
    Could use this feedback to analyze important dimensional components of cluster; where to extend and where to stop;
    can also measure extremity of cluster before and after this, representing misshapenness.

Hierarchicality:
    nodal factor/shattered factor: num words that are part of a node divided by num not
    hierarchical facter (burst factor is 1-this or 1/this?):
        num nodes that are part of supernodes versus num not

Have each node store a vector representation of the line from a to b,
    normalize them, then compute an average abs(dot product) of these,
    as a measure of alignment of nodes.
    Get some sort of distribution graph of node lengths, like we did with word distances.

embedysis
encodysis
wordalysis
embedology
vectorology
vectoralysis



try projecting each word vector onto its major axis and see how they are related. (Darian's Idea)



def shift(string, k=1):
    # Usefuls start at 32 and end at 126. So mod by 127-32=95.
    s = ""
    for c in string:
        n = ord(c)
        if n >= 32 and n <= 126:
            s += chr((n-32 + k) % 95 + 32)
        else: s += c
    return s


"""self._print("Ousting Nearly Empty Universes") #"Ousting the Flatlanders"
if len(self.space) >= 4:
    #return
    for i, vec in enumerate(tqdm(self.space, disable=(not self.auto_print),
                            desc="Acquainting the Species")):
        #nearest_i = (0 if i != 0 else 1) # Can't start off on self!
        #nearest_2i = (2 if i != 2 else 3) # Can't start off same as nearest!
        nearest_i = (i + 1) % len(self.space)
        nearest_2i = (i + 2) % len(self.space)
        furthest_i = i # Start off closest possible - self.
        nearest_dist = self.metric(vec, self.space[nearest_i])
        nearest_2dist = self.metric(vec, self.space[nearest_2i])
        furthest_dist = 0
        # In case we started them off switched:
        if nearest_2dist < nearest_dist:
            temp_i = nearest_i
            temp_dist = nearest_dist
            nearest_i = nearest_2i
            nearest_2i = temp_i
            #furthest_i = temp_i
            nearest_dist = nearest_2dist
            nearest_2dist = temp_dist
            #furthest_dist = temp_dist
        for j, other in enumerate(self.space):
            if j != i:
                dist = self.metric(vec, other)
                if dist < nearest_dist:
                    nearest_2dist = nearest_dist
                    nearest_2i = nearest_i
                    nearest_dist = dist
                    nearest_i = j
                elif dist < nearest_2dist and j != nearest_i:
                    nearest_2dist = dist
                    nearest_2i = j
                if dist > furthest_dist:
                    furthest_dist = dist
                    furthest_i = j
        self.neighbors[i][0] = nearest_i
        self.neighbors[i][1] = nearest_2i
        self.neighbors[i][2] = furthest_i
        self.neighbors_dist[i][0] = nearest_dist
        self.neighbors_dist[i][1] = nearest_2dist
        self.neighbors_dist[i][2] = furthest_dist

        #for testing only:
        #if i > 10: break"""
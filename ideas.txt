Overall:
--------
- print out metric with report
- build in anvaka's visualization?
- decide whether it is better to have it be able to save live objects and continue
computing, or whether it is better to have it be backwards compatibile by only
storing pure data. Or fix problem w/ hybrid? OR MAKE NEW INSTANCE IN LOAD FUNCTION!
- fix all to work in python3 - check if evaluator kwargs need to be unicode,
particularly if run and save in python 2, then go to 3 to run again.
!Protocol level won't allow this?
- test imports
- documentation
- update metric_args to use a partial function instead, from functtools?
Fix problem where metric_args doesn't work on non-scipy-builtins.
Sholdn't interfere with scipy because of metric_str? Use update_wrapper, python3 book pg 145.
Or if not functtools.partial, then functtools.partialmethod, or simple decorator.
- use built-in print function's file-handler to output to file?

Analyses:
---------
- check if there are properties associated with length of vectors in non-normalized spaces,
ex: check if outliers are longer
- on presentable analysis make sure that same words in each space, and or trained
on same training data, maybe as separate analysis!
- fasttext is not normalized - compare to self normalized!
- compare before adn after being in an RNN. Norms, and also performance on analogies.
- find which stats are most indicative of success, then add those into a loss function!!
- various hub configurations side by side
- (my, in purple notebook) outlier count in small space vs large, and node count.

Analyst:
--------
DISTANCE AND NEIGHBORS COMPUTATION:
- use ckdtree, with leafsize = cubed root of space size?
- use argpartition to not have to sort all 2million, but just the first 5
- use half of distance matrix; use much smaller precision for first run, then recompute first few as candidates
for nearest neighbors. Or use scipy for everything, since it seems to do these?
- and or make distance matrix getter take a slice object and compute stuff on the spot.
- make function to get k neighbors of an object
- phase in metric_in_model to be used where can. Check if can in nodes/clusters.
- phase out 1,2,f and make K neighbor calculator. change asserts to reflect it.
OTHER:
- make function to compare clustering algorithms in a given analyst
(can be done in post-processing of text until this becomes relevant)
- make metric function which works on words instead of just vectors.
- add in_frequency_order=False and frequencies=[] to analyst, complete with tests on that.
- list words who are no one's nearest neighbor
- decide if multi-comparison needs grapher....
- make grapher object, and have analyst have it as a data member - analyst's graph
function just call's its grapher's graph function.
- make delete_evaluator function, and function to make it printable if not?
or make it so that adding, when not a category for it, won't replace it?
- make ability to compare two+ categories side-by-side, like as 2 analysts.
- continue adding make_default_evaluator options for new evaluators.
- add functionality to recompute stars and data but not clusters, or give disclaimer/
warning that changing it won't work.
- evaluation indicators to test validity of an algorithm?
Davies-Bouldin, Dunn, Silhouette coefficient; or for external evaluation:
Rand indicator, F indicator, Jaccard indicator,Fowlkes-mallows indicator,
Mutual information, Confusion matrix.
- implement grapher

Word Group Specific Analysis:
-----------------------------
- make it so clusters only compute at start what is needed for report - other
info can come in an inspection function! not printed when cluster printed.
- make funct to examine a group of given strings thoroughly - makes a cluster.
adds it to where?
- look into cluster extremities! (strange attractors)
- check if correct standard deviation of vectors from centroids - like dispersion:
https://math.stackexchange.com/questions/2442132/generalize-standard-deviation-to-vectors
(This is also for the space as a whole)
- use ward dissimilarity somehow? In inspection of a given group, dissimilarity to
all other clusters?
- make second_downstream function? And maybe one that switches
randomly if dist within epsilon

Clusterizers TO DO:
-------------------
- add ability to keep specifically non-nodal hubs - both - for branching studies.
- cluster by length of vector to test?
- Spatial
    - include Local Outlier Factor, Local Reachability Density.
    Perhaps in separate clusterizer?
    - covariance, variance, 
- Rest of built-ins
- kmeans or EM (base default off of nodal hub count, or allow varying parameters)
- PHATE (base default off of nodal hub count, or allow varying parameters)
- pick some other important ones, affinity?
- use variable density of space, by measuring the density of the surrounding region,
say, pick 10 nearest, and measure their dispersion or repulsion or something; then
can use this for clusterizing. Could even compare nearer 4 to further 8 or something
and take a derivative to know how fast the density is changing!
Want to only define a cluster from a node if local density is decreasing as we go out.
However, this may have exactly the same effect as defining a hub, because all of the
nearest neighbor arrows are pointing in - which means density will decrease as we go out.
Thus hubs have a mathematical basis.
- Rule-based partitioning clusters (see purple notebook)
- implement a k-means cheat clusterizer in which you pick words to be cluster centers,
and partition the rest into those.
- give specific example use cases for clusters, such as having a custom clustering
algorithm which builds clusters stemmed from color words. include as example
- check that we're only printing what we should - particularly with dependent
clusterizers unlisted in evaluators/categories

Analogical Analyses:
--------------------
- EVERYTHING
- make analogist, and analogyRanker subclasses of evaluator.



EMBEDDING ALGORITHM IDEAS
-------------------------
- keep a frequency value for each word, and only shift by weighted amounts as we train.


(categories:)
spatial
nodes
clusters
user_cluster_algorithm1
user_cluster_algorithm2
#General Stats on analogy datasets:
#    set1
#    set2
#    set3
Stats on Analogy Set1:
    dispersion
    medoid
    etc
    similarity to set2
    similarity to set3
Stats on Analogy set2:
    ...
Stats on Analogy set3:
    ...
Analogy Algorithm 1:
    set1_score
    set2_score
    set3_score
Reclustering stats based on analogy test sets:
    (new general space info based on clusters)



average distance to nearest; nearest n
average distance to furthest; furthest n
average distance

find words where nearest are each other (these are nodes),
    then recursively find all words whose nearest are one of these, and so on.
    This should find peaks, or local concentrations; turn these into clusters.
    note: may end up with nearly num_words/2 clusters
    print percent of words that are part of a node
find average distance between words in "clusters".
    Some nodes will be closer than this, and to more than one cluster.
    But if we add all, may end up with one giant cluster.
    May label those further than this as outliers?
    Use avg dist between words in node-pairs as cutoff for outliers instead of avg dist of that cluster?
    Make new entity called "core" of all within that distance; primary dispersion measurement on this? Or would this simply be like the same as avg node width?
make function to print primary components of cluster; nodes/those closest.

make function to take in word/vec list and make a cluster based on it,
    then find all other words likely to belong to this cluster.
    This is useful since certain types of clusters will frequently overlap and words will belong to multiple classes.
    Then can measure purity of cluster based on user feed-back of what words didn't belong.
    Could use this feedback to analyze important dimensional components of cluster; where to extend and where to stop;
    can also measure extremity of cluster before and after this, representing misshapenness.

Hierarchicality:
    nodal factor/shattered factor: num words that are part of a node divided by num not
    hierarchical facter (burst factor is 1-this or 1/this?):
        num nodes that are part of supernodes versus num not

Have each node store a vector representation of the line from a to b,
    normalize them, then compute an average abs(dot product) of these,
    as a measure of alignment of nodes.
    Get some sort of distribution graph of node lengths, like we did with word distances.

embedysis
encodysis
wordalysis
embedology
vectorology
vectoralysis



try projecting each word vector onto its major axis and see how they are related. (Darian's Idea)



def shift(string, k=1):
    # Usefuls start at 32 and end at 126. So mod by 127-32=95.
    s = ""
    for c in string:
        n = ord(c)
        if n >= 32 and n <= 126:
            s += chr((n-32 + k) % 95 + 32)
        else: s += c
    return s


"""
if len(self.space) >= 4:
    #return
    for i, vec in enumerate(tqdm(self.space, disable=(not self.auto_print),
                            desc="Acquainting the Species")):
        #nearest_i = (0 if i != 0 else 1) # Can't start off on self!
        #nearest_2i = (2 if i != 2 else 3) # Can't start off same as nearest!
        nearest_i = (i + 1) % len(self.space)
        nearest_2i = (i + 2) % len(self.space)
        furthest_i = i # Start off closest possible - self.
        nearest_dist = self.metric(vec, self.space[nearest_i])
        nearest_2dist = self.metric(vec, self.space[nearest_2i])
        furthest_dist = 0
        # In case we started them off switched:
        if nearest_2dist < nearest_dist:
            temp_i = nearest_i
            temp_dist = nearest_dist
            nearest_i = nearest_2i
            nearest_2i = temp_i
            #furthest_i = temp_i
            nearest_dist = nearest_2dist
            nearest_2dist = temp_dist
            #furthest_dist = temp_dist
        for j, other in enumerate(self.space):
            if j != i:
                dist = self.metric(vec, other)
                if dist < nearest_dist:
                    nearest_2dist = nearest_dist
                    nearest_2i = nearest_i
                    nearest_dist = dist
                    nearest_i = j
                elif dist < nearest_2dist and j != nearest_i:
                    nearest_2dist = dist
                    nearest_2i = j
                if dist > furthest_dist:
                    furthest_dist = dist
                    furthest_i = j
        self.neighbors[i][0] = nearest_i
        self.neighbors[i][1] = nearest_2i
        self.neighbors[i][2] = furthest_i
        self.neighbors_dist[i][0] = nearest_dist
        self.neighbors_dist[i][1] = nearest_2dist
        self.neighbors_dist[i][2] = furthest_dist

        #for testing only:
        #if i > 10: break"""